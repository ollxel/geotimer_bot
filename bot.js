// =================================================================
// 1. –ò–ú–ü–û–†–¢–´ –ò –ù–ê–ß–ê–õ–¨–ù–ê–Ø –ù–ê–°–¢–†–û–ô–ö–ê
// =================================================================
require('dotenv').config();

const express = require('express');
const TelegramBot = require('node-telegram-bot-api');
const { Pool } = require('pg');
const NodeGeocoder = require('node-geocoder');

// --- –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã ---
const token = process.env.BOT_TOKEN;
const port = process.env.PORT || 3000;
const url = process.env.RENDER_URL;
const dbUrl = process.env.DATABASE_URL;

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
if (!token || !url || !dbUrl) {
  console.error('–û—à–∏–±–∫–∞: –ù–µ –∑–∞–¥–∞–Ω—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è (BOT_TOKEN, RENDER_URL, DATABASE_URL).');
  process.exit(1);
}

const webhookPath = `/bot${token}`;
const fullWebhookUrl = `${url}${webhookPath}`;

// --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤ ---
const bot = new TelegramBot(token);
const app = express();
app.use(express.json());

const pool = new Pool({
  connectionString: dbUrl,
  ssl: {
    rejectUnauthorized: false, // –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î –Ω–∞ Render
  },
});

const geocoder = NodeGeocoder({ provider: 'openstreetmap' });

// –ü—Ä–æ—Å—Ç–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è –º–Ω–æ–≥–æ—à–∞–≥–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥
const userStates = {};


// =================================================================
// 2. –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò (UTILS)
// =================================================================

/**
 * –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–π –∞–¥—Ä–µ—Å –≤ –≥–µ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã.
 * @param {string} address - –ê–¥—Ä–µ—Å –¥–ª—è –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è.
 * @returns {Promise<{lat: number, lon: number}|null>} –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∏–ª–∏ null –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏.
 */
const geocodeAddress = async (address) => {
  try {
    const res = await geocoder.geocode(address);
    if (res && res.length > 0) {
      return { lat: res[0].latitude, lon: res[0].longitude };
    }
    return null;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
    return null;
  }
};


// =================================================================
// 3. –§–£–ù–ö–¶–ò–ò –î–õ–Ø –†–ê–ë–û–¢–´ –° –ë–ê–ó–û–ô –î–ê–ù–ù–´–• (DB)
// =================================================================

/**
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö, —Å–æ–∑–¥–∞–≤–∞—è —Ç–∞–±–ª–∏—Ü—ã, –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç.
 */
const initDb = async () => {
  const client = await pool.connect();
  try {
    // –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ PostGIS –≤–∫–ª—é—á–µ–Ω–æ: `CREATE EXTENSION postgis;`
    await client.query(`
      CREATE TABLE IF NOT EXISTS users (
        id BIGINT PRIMARY KEY,
        first_name VARCHAR(255),
        username VARCHAR(255),
        created_at TIMESTAMPTZ DEFAULT NOW()
      );

      CREATE TABLE IF NOT EXISTS triggers (
        id SERIAL PRIMARY KEY,
        user_id BIGINT REFERENCES users(id) ON DELETE CASCADE,
        name VARCHAR(255) NOT NULL,
        location GEOGRAPHY(Point, 4326) NOT NULL,
        radius INT NOT NULL,
        last_state VARCHAR(10) DEFAULT 'outside',
        created_at TIMESTAMPTZ DEFAULT NOW()
      );

      CREATE INDEX IF NOT EXISTS triggers_location_idx ON triggers USING GIST (location);
    `);
  } finally {
    client.release();
  }
};

const db = {
  async upsertUser(userData) {
    const { id, first_name, username } = userData;
    const query = `
      INSERT INTO users (id, first_name, username) VALUES ($1, $2, $3)
      ON CONFLICT (id) DO UPDATE SET first_name = EXCLUDED.first_name, username = EXCLUDED.username;
    `;
    await pool.query(query, [id, first_name, username]);
  },
  async addTrigger(userId, name, lat, lon, radius) {
    const query = `
      INSERT INTO triggers (user_id, name, location, radius)
      VALUES ($1, $2, ST_SetSRID(ST_MakePoint($3, $4), 4326)::geography, $5)
      RETURNING *;
    `;
    const res = await pool.query(query, [userId, name, lon, lat, radius]);
    return res.rows[0];
  },
  async getTriggers(userId) {
    const res = await pool.query('SELECT id, name, radius FROM triggers WHERE user_id = $1 ORDER BY name', [userId]);
    return res.rows;
  },
  async deleteTrigger(triggerId, userId) {
    const res = await pool.query('DELETE FROM triggers WHERE id = $1 AND user_id = $2', [triggerId, userId]);
    return res.rowCount > 0;
  },
  async deleteAllUserData(userId) {
      await pool.query('DELETE FROM triggers WHERE user_id = $1', [userId]);
      await pool.query('DELETE FROM users WHERE id = $1', [userId]);
  },
  async checkAllTriggers(userId, lat, lon) {
      const query = `
          SELECT id, name, radius, last_state,
                 ST_DWithin(location, ST_SetSRID(ST_MakePoint($2, $3), 4326)::geography, radius) AS is_inside
          FROM triggers WHERE user_id = $1;
      `;
      const res = await pool.query(query, [userId, lon, lat]);
      return res.rows;
  },
  async updateTriggerState(triggerId, newState) {
      await pool.query('UPDATE triggers SET last_state = $1 WHERE id = $2', [newState, triggerId]);
  }
};


// =================================================================
// 4. –õ–û–ì–ò–ö–ê –ë–û–¢–ê (–û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–û–ú–ê–ù–î –ò –°–û–û–ë–©–ï–ù–ò–ô)
// =================================================================

// --- /start –∏ /help ---
bot.onText(/\/(start|help)/, async (msg) => {
  const chatId = msg.chat.id;
  await db.upsertUser(msg.from);
  const text = `
–ü—Ä–∏–≤–µ—Ç, ${msg.from.first_name}! ü§ñ

–Ø GeoTimerBot ‚Äî –≤–∞—à –ª–∏—á–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –¥–ª—è –≥–µ–æ–ª–æ–∫–∞—Ü–∏–æ–Ω–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π.

**–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**
/add - –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –≥–µ–æ-—Ç—Ä–∏–≥–≥–µ—Ä.
/list - –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –≤–∞—à–∏ —Ç—Ä–∏–≥–≥–µ—Ä—ã.
/forgetme - –ü–æ–ª–Ω–æ—Å—Ç—å—é —É–¥–∞–ª–∏—Ç—å –≤—Å–µ –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ.

–ß—Ç–æ–±—ã —è –º–æ–≥ —Ä–∞–±–æ—Ç–∞—Ç—å, –º–Ω–µ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è –≤–∞—à–∞ **Live Location (–¢—Ä–∞–Ω—Å–ª—è—Ü–∏—è –≥–µ–æ–ø–æ–∑–∏—Ü–∏–∏)**. –ü—Ä–æ—Å—Ç–æ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ –µ–µ –∫ —á–∞—Ç—É –∏ –≤—ã–±–µ—Ä–∏—Ç–µ "–¢—Ä–∞–Ω—Å–ª–∏—Ä–æ–≤–∞—Ç—å –±–µ—Å—Å—Ä–æ—á–Ω–æ".
  `;
  bot.sendMessage(chatId, text);
});

// --- /add ---
bot.onText(/\/add/, async (msg) => {
  const chatId = msg.chat.id;
  await db.upsertUser(msg.from);
  userStates[chatId] = { step: 'awaiting_name', data: {} };
  bot.sendMessage(chatId, '–î–∞–≤–∞–π—Ç–µ —Å–æ–∑–¥–∞–¥–∏–º –Ω–æ–≤—ã–π —Ç—Ä–∏–≥–≥–µ—Ä. –ö–∞–∫ –≤—ã –µ–≥–æ –Ω–∞–∑–æ–≤–µ—Ç–µ? (–Ω–∞–ø—Ä–∏–º–µ—Ä, "–î–æ–º", "–û—Ñ–∏—Å")');
});

// --- /list ---
bot.onText(/\/list/, async (msg) => {
  const chatId = msg.chat.id;
  await db.upsertUser(msg.from);
  const triggers = await db.getTriggers(chatId);

  if (triggers.length === 0) {
    return bot.sendMessage(chatId, '–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤. –°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—ã–π —Å –ø–æ–º–æ—â—å—é /add.');
  }

  const inline_keyboard = triggers.map(t =>
    [{ text: `‚ùå –£–¥–∞–ª–∏—Ç—å "${t.name}" (—Ä–∞–¥–∏—É—Å ${t.radius}–º)`, callback_data: `delete_${t.id}` }]
  );

  bot.sendMessage(chatId, '–í–∞—à–∏ –≥–µ–æ-—Ç—Ä–∏–≥–≥–µ—Ä—ã:', {
    reply_markup: { inline_keyboard }
  });
});

// --- /forgetme ---
bot.onText(/\/forgetme/, async (msg) => {
    const chatId = msg.chat.id;
    await db.deleteAllUserData(chatId);
    bot.sendMessage(chatId, '–í—Å–µ –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –±—ã–ª–∏ –ø–æ–ª–Ω–æ—Å—Ç—å—é —É–¥–∞–ª–µ–Ω—ã.');
});

// --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ ---
bot.on('callback_query', async (callbackQuery) => {
  const { message, data, from } = callbackQuery;
  const chatId = message.chat.id;

  if (data.startsWith('delete_')) {
    const triggerId = parseInt(data.split('_')[1]);
    const success = await db.deleteTrigger(triggerId, from.id);
    if (success) {
      bot.answerCallbackQuery(callbackQuery.id, { text: '–¢—Ä–∏–≥–≥–µ—Ä —É–¥–∞–ª–µ–Ω!' });
      bot.editMessageText('–¢—Ä–∏–≥–≥–µ—Ä –±—ã–ª —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.', {
        chat_id: chatId,
        message_id: message.message_id,
      });
    } else {
      bot.answerCallbackQuery(callbackQuery.id, { text: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏.', show_alert: true });
    }
  }
});

// --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ (Live –∏ –æ–±—ã—á–Ω–æ–π) ---
bot.on('location', async (msg) => {
  const chatId = msg.chat.id;
  const state = userStates[chatId];
  const { latitude, longitude } = msg.location;

  // 1. –ï—Å–ª–∏ —ç—Ç–æ Live Location, –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç—Ä–∏–≥–≥–µ—Ä—ã
  if (msg.live_period) {
    const results = await db.checkAllTriggers(chatId, latitude, longitude);
    for (const trigger of results) {
      const hasEntered = trigger.is_inside && trigger.last_state === 'outside';
      const hasExited = !trigger.is_inside && trigger.last_state === 'inside';

      if (hasEntered) {
        bot.sendMessage(chatId, `üîî –í—ã –≤–æ—à–ª–∏ –≤ –∑–æ–Ω—É "${trigger.name}"!`);
        await db.updateTriggerState(trigger.id, 'inside');
      } else if (hasExited) {
        bot.sendMessage(chatId, `üîï –í—ã –ø–æ–∫–∏–Ω—É–ª–∏ –∑–æ–Ω—É "${trigger.name}".`);
        await db.updateTriggerState(trigger.id, 'outside');
      }
    }
    return;
  }

  // 2. –ï—Å–ª–∏ —ç—Ç–æ –æ–±—ã—á–Ω–∞—è —Ç–æ—á–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Å–æ–∑–¥–∞–Ω–∏—è —Ç—Ä–∏–≥–≥–µ—Ä–∞
  if (state && state.step === 'awaiting_location') {
    state.data.location = { lat: latitude, lon: longitude };
    state.step = 'awaiting_radius';
    bot.sendMessage(chatId, `–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ! –¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ —Ä–∞–¥–∏—É—Å –∑–æ–Ω—ã –≤ –º–µ—Ç—Ä–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä, 100).`);
  }
});

// --- –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç—Ä–∏–≥–≥–µ—Ä–∞ ---
bot.on('message', async (msg) => {
  const chatId = msg.chat.id;
  const state = userStates[chatId];
  const text = msg.text;

  // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã, –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é –∏ –µ—Å–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
  if (!state || !text || text.startsWith('/') || msg.location) return;

  try {
    if (state.step === 'awaiting_name') {
      state.data.name = text;
      state.step = 'awaiting_location';
      bot.sendMessage(chatId, `–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é –¥–ª—è "${text}" (—Ç–æ—á–∫–æ–π –Ω–∞ –∫–∞—Ä—Ç–µ –∏–ª–∏ –∞–¥—Ä–µ—Å–æ–º).`);
    } else if (state.step === 'awaiting_location') {
      bot.sendMessage(chatId, '–ò—â—É –∞–¥—Ä–µ—Å –Ω–∞ –∫–∞—Ä—Ç–µ...');
      const coords = await geocodeAddress(text);
      if (coords) {
        state.data.location = coords;
        state.step = 'awaiting_radius';
        bot.sendMessage(chatId, `–ê–¥—Ä–µ—Å –Ω–∞–π–¥–µ–Ω! –¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ —Ä–∞–¥–∏—É—Å –∑–æ–Ω—ã –≤ –º–µ—Ç—Ä–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä, 100).`);
      } else {
        bot.sendMessage(chatId, '–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ç–∞–∫–æ–π –∞–¥—Ä–µ—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–æ—á–∫—É –Ω–∞ –∫–∞—Ä—Ç–µ.');
      }
    } else if (state.step === 'awaiting_radius') {
      const radius = parseInt(text);
      if (isNaN(radius) || radius <= 0 || radius > 10000) {
        return bot.sendMessage(chatId, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 10000.');
      }
      state.data.radius = radius;
      
      await db.addTrigger(chatId, state.data.name, state.data.location.lat, state.data.location.lon, radius);
      bot.sendMessage(chatId, `‚úÖ –ì–æ—Ç–æ–≤–æ! –¢—Ä–∏–≥–≥–µ—Ä "${state.data.name}" —Å —Ä–∞–¥–∏—É—Å–æ–º ${radius} –º —Å–æ–∑–¥–∞–Ω.`);
      delete userStates[chatId]; // –ó–∞–≤–µ—Ä—à–∞–µ–º –¥–∏–∞–ª–æ–≥
    }
  } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –≤ –¥–∏–∞–ª–æ–≥–µ:", error);
      bot.sendMessage(chatId, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.");
      delete userStates[chatId];
  }
});


// =================================================================
// 5. –ó–ê–ü–£–°–ö –°–ï–†–í–ï–†–ê –ò –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø
// =================================================================

/**
 * –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
 */
async function startApp() {
  try {
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–µ–±—Ö—É–∫
    await bot.setWebHook(fullWebhookUrl);
    console.log(`–í–µ–±—Ö—É–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ ${fullWebhookUrl}`);

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    await initDb();
    console.log('–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞.');

    // –†–æ—É—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –æ—Ç Telegram
    app.post(webhookPath, (req, res) => {
      bot.processUpdate(req.body);
      res.sendStatus(200);
    });

    // –†–æ—É—Ç –¥–ª—è Uptime Robot
    app.get('/', (req, res) => {
      res.send('GeoTimerBot –∂–∏–≤!');
    });

    // –ó–∞–ø—É—Å–∫–∞–µ–º –≤–µ–±-—Å–µ—Ä–≤–µ—Ä
    app.listen(port, () => {
      console.log(`–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${port}`);
    });

  } catch (error) {
    console.error('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:', error);
    process.exit(1);
  }
}

startApp();
