// =================================================================
// GeoTimerBot 2.0 (–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
// =================================================================

// 1. –ò–ú–ü–û–†–¢–´ –ò –ù–ê–ß–ê–õ–¨–ù–ê–Ø –ù–ê–°–¢–†–û–ô–ö–ê
// =================================================================
require('dotenv').config();

const express = require('express');
const TelegramBot = require('node-telegram-bot-api');
const { Pool } = require('pg');
const NodeGeocoder = require('node-geocoder');

// --- –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã ---
const token = process.env.BOT_TOKEN;
const port = process.env.PORT || 3000;
const url = process.env.RENDER_URL;
const dbUrl = process.env.DATABASE_URL;
const webAppUrl = process.env.WEB_APP_URL || "https://telegram.org"; 

if (!token || !url || !dbUrl) {
  console.error('–û—à–∏–±–∫–∞: –ù–µ –∑–∞–¥–∞–Ω—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è (BOT_TOKEN, RENDER_URL, DATABASE_URL).');
  process.exit(1);
}

const webhookPath = `/bot${token}`;
const fullWebhookUrl = `${url}${webhookPath}`;

// --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤ ---
const bot = new TelegramBot(token);
const app = express();
app.use(express.json());

const pool = new Pool({
  connectionString: dbUrl,
  ssl: { rejectUnauthorized: false },
});

const geocoder = NodeGeocoder({ provider: 'openstreetmap' });
const userStates = {};


// =================================================================
// 2. –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò –ò –õ–û–ì–ò–ö–ê –ë–ê–ó–´ –î–ê–ù–ù–´–•
// =================================================================

const geocodeAddress = async (address) => {
  try {
    const res = await geocoder.geocode(address);
    if (res && res.length > 0) return { lat: res[0].latitude, lon: res[0].longitude };
    return null;
  } catch (error) { console.error('–û—à–∏–±–∫–∞ –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è:', error); return null; }
};

const initDb = async () => {
  const client = await pool.connect();
  try {
    await client.query(`
      CREATE TABLE IF NOT EXISTS users (id BIGINT PRIMARY KEY, first_name VARCHAR(255), username VARCHAR(255), created_at TIMESTAMPTZ DEFAULT NOW());
      CREATE TABLE IF NOT EXISTS triggers (id SERIAL PRIMARY KEY, user_id BIGINT REFERENCES users(id) ON DELETE CASCADE, name VARCHAR(255) NOT NULL, location GEOGRAPHY(Point, 4326) NOT NULL, radius INT NOT NULL, last_state VARCHAR(10) DEFAULT 'outside', created_at TIMESTAMPTZ DEFAULT NOW());
      CREATE INDEX IF NOT EXISTS triggers_location_idx ON triggers USING GIST (location);
    `);
  } finally { client.release(); }
};

const db = {
  async upsertUser(userData) {
    const { id, first_name, username } = userData;
    await pool.query(`INSERT INTO users (id, first_name, username) VALUES ($1, $2, $3) ON CONFLICT (id) DO UPDATE SET first_name = EXCLUDED.first_name, username = EXCLUDED.username;`, [id, first_name, username]);
  },
  async addTrigger(userId, name, lat, lon, radius) {
    const res = await pool.query(`INSERT INTO triggers (user_id, name, location, radius) VALUES ($1, $2, ST_SetSRID(ST_MakePoint($3, $4), 4326)::geography, $5) RETURNING *;`, [userId, name, lon, lat, radius]);
    return res.rows[0];
  },
  async getTriggers(userId) {
    const res = await pool.query('SELECT id, name, radius FROM triggers WHERE user_id = $1 ORDER BY name', [userId]);
    return res.rows;
  },
  async deleteTrigger(triggerId, userId) {
    const res = await pool.query('DELETE FROM triggers WHERE id = $1 AND user_id = $2', [triggerId, userId]);
    return res.rowCount > 0;
  },
  async deleteAllUserData(userId) {
    await pool.query('DELETE FROM triggers WHERE user_id = $1', [userId]);
    await pool.query('DELETE FROM users WHERE id = $1', [userId]);
  },
  async checkAllTriggers(userId, lat, lon) {
    const res = await pool.query(`SELECT id, name, radius, last_state, ST_DWithin(location, ST_SetSRID(ST_MakePoint($2, $3), 4326)::geography, radius) AS is_inside FROM triggers WHERE user_id = $1;`, [userId, lon, lat]);
    return res.rows;
  },
  async updateTriggerState(triggerId, newState) {
    await pool.query('UPDATE triggers SET last_state = $1 WHERE id = $2', [newState, triggerId]);
  }
};


// =================================================================
// 3. –õ–û–ì–ò–ö–ê –ë–û–¢–ê (–í–ï–†–°–ò–Ø 2.0)
// =================================================================

// --- /start –∏ /help ---
bot.onText(/\/(start|help)/, async (msg) => {
  const chatId = msg.chat.id;
  await db.upsertUser(msg.from);
  const text = `
–ü—Ä–∏–≤–µ—Ç, ${msg.from.first_name}! ü§ñ

–≠—Ç–æ **GeoTimerBot 2.0**. –í—Å–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–µ–ø–µ—Ä—å —á–µ—Ä–µ–∑ —É–¥–æ–±–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å.

–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É **"–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"** –≤–Ω–∏–∑—É –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /menu.

–î–ª—è —Ä–∞–±–æ—Ç—ã –º–Ω–µ –ø–æ-–ø—Ä–µ–∂–Ω–µ–º—É –Ω—É–∂–Ω–∞ –≤–∞—à–∞ **Live Location (–¢—Ä–∞–Ω—Å–ª—è—Ü–∏—è –≥–µ–æ–ø–æ–∑–∏—Ü–∏–∏)**.
  `;
  bot.sendMessage(chatId, text, {
    reply_markup: {
      keyboard: [[{ text: "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é" }]],
      resize_keyboard: true,
    }
  });
});

// --- –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ (WEB APP) ---
bot.onText(/\/menu|–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é/, (msg) => {
    bot.sendMessage(msg.chat.id, '–û—Ç–∫—Ä—ã–≤–∞—é –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é...', {
        reply_markup: {
            inline_keyboard: [
                [{ text: '‚ûï –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Ç—Ä–∏–≥–≥–µ—Ä', web_app: { url: `${webAppUrl}/add` } }],
                [{ text: 'üìã –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–æ–∏ —Ç—Ä–∏–≥–≥–µ—Ä—ã', web_app: { url: webAppUrl } }],
            ]
        }
    });
});

// --- –í–†–ï–ú–ï–ù–ù–ê–Ø –ö–û–ú–ê–ù–î–ê –î–õ–Ø –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø ---
bot.onText(/\/oldadd/, async (msg) => {
    const chatId = msg.chat.id;
    await db.upsertUser(msg.from);
    userStates[chatId] = { step: 'awaiting_name', data: {} };
    bot.sendMessage(chatId, '–í–†–ï–ú–ï–ù–ù–´–ô –†–ï–ñ–ò–ú –î–û–ë–ê–í–õ–ï–ù–ò–Ø.\n–ö–∞–∫ –≤—ã –Ω–∞–∑–æ–≤–µ—Ç–µ —Ç—Ä–∏–≥–≥–µ—Ä?');
});

// --- –û–ë–†–ê–ë–û–¢–ö–ê –ì–ï–û–õ–û–ö–ê–¶–ò–ò (–° –î–ï–ë–ê–ì–û–ú) ---
bot.on('location', async (msg) => {
    const chatId = msg.chat.id;
    const { latitude, longitude } = msg.location;

    if (msg.live_period) {
        console.log(`[${chatId}] –ü–æ–ª—É—á–µ–Ω–æ live-–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: ${latitude}, ${longitude}`);
        try {
            const triggers = await db.checkAllTriggers(chatId, latitude, longitude);
            if (triggers.length === 0) return;
            console.log(`[${chatId}] –ù–∞–π–¥–µ–Ω–æ ${triggers.length} —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏.`);
            for (const trigger of triggers) {
                const { id, name, last_state, is_inside } = trigger;
                console.log(`[${chatId}] –ü—Ä–æ–≤–µ—Ä–∫–∞ "${name}": –ë–î=${last_state}, –§–∞–∫—Ç=${is_inside}.`);
                if (is_inside && last_state === 'outside') {
                    console.log(`[${chatId}] –°–û–ë–´–¢–ò–ï: –í—Ö–æ–¥ –≤ "${name}".`);
                    bot.sendMessage(chatId, `üîî –í—ã –≤–æ—à–ª–∏ –≤ –∑–æ–Ω—É "${name}"!`);
                    await db.updateTriggerState(id, 'inside');
                } else if (!is_inside && last_state === 'inside') {
                    console.log(`[${chatId}] –°–û–ë–´–¢–ò–ï: –í—ã—Ö–æ–¥ –∏–∑ "${name}".`);
                    bot.sendMessage(chatId, `üîï –í—ã –ø–æ–∫–∏–Ω—É–ª–∏ –∑–æ–Ω—É "${name}".`);
                    await db.updateTriggerState(id, 'outside');
                }
            }
        } catch (error) {
            console.error(`[${chatId}] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ live location:`, error);
        }
    } else if (userStates[chatId] && userStates[chatId].step === 'awaiting_location') {
        const state = userStates[chatId];
        state.data.location = { lat: latitude, lon: longitude };
        state.step = 'awaiting_radius';
        bot.sendMessage(chatId, `–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ! –¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ —Ä–∞–¥–∏—É—Å –≤ –º–µ—Ç—Ä–∞—Ö.`);
    }
});

// --- –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è /oldadd ---
bot.on('message', async (msg) => {
    const chatId = msg.chat.id;
    const state = userStates[chatId];
    if (!state || !msg.text || msg.text.startsWith('/')) return;

    try {
        if (state.step === 'awaiting_name') {
            state.data.name = msg.text;
            state.step = 'awaiting_location';
            bot.sendMessage(chatId, `–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é –¥–ª—è "${msg.text}".`);
        } else if (state.step === 'awaiting_location') {
            bot.sendMessage(chatId, '–ò—â—É –∞–¥—Ä–µ—Å...');
            const coords = await geocodeAddress(msg.text);
            if (coords) {
                state.data.location = coords;
                state.step = 'awaiting_radius';
                bot.sendMessage(chatId, `–ê–¥—Ä–µ—Å –Ω–∞–π–¥–µ–Ω! –¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ —Ä–∞–¥–∏—É—Å –≤ –º–µ—Ç—Ä–∞—Ö.`);
            } else {
                bot.sendMessage(chatId, '–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∞–¥—Ä–µ—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–æ—á–∫—É –Ω–∞ –∫–∞—Ä—Ç–µ.');
            }
        } else if (state.step === 'awaiting_radius') {
            const radius = parseInt(msg.text);
            if (isNaN(radius) || radius <= 0) return bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.');
            await db.addTrigger(chatId, state.data.name, state.data.location.lat, state.data.location.lon, radius);
            bot.sendMessage(chatId, `‚úÖ –ì–æ—Ç–æ–≤–æ! –¢—Ä–∏–≥–≥–µ—Ä "${state.data.name}" —Å–æ–∑–¥–∞–Ω.`);
            delete userStates[chatId];
        }
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –≤ –¥–∏–∞–ª–æ–≥–µ:", error);
        bot.sendMessage(chatId, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.");
        delete userStates[chatId];
    }
});

// --- –ö–æ–º–∞–Ω–¥–∞ /forgetme ---
bot.onText(/\/forgetme/, async (msg) => {
    await db.deleteAllUserData(msg.chat.id);
    bot.sendMessage(msg.chat.id, '–í—Å–µ –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –±—ã–ª–∏ –ø–æ–ª–Ω–æ—Å—Ç—å—é —É–¥–∞–ª–µ–Ω—ã.');
});


// =================================================================
// 4. –ó–ê–ü–£–°–ö –°–ï–†–í–ï–†A
// =================================================================
async function startApp() {
  try {
    await bot.setWebHook(fullWebhookUrl);
    console.log(`–í–µ–±—Ö—É–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ ${fullWebhookUrl}`);
    await initDb();
    console.log('–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞.');
    app.post(webhookPath, (req, res) => {
      bot.processUpdate(req.body);
      res.sendStatus(200);
    });
    app.get('/', (req, res) => res.send('GeoTimerBot 2.0 –∂–∏–≤!'));
    app.listen(port, () => console.log(`–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${port}`));
  } catch (error) {
    console.error('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:', error);
    process.exit(1);
  }
}

startApp();
